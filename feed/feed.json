{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Lab 6: 11ty",
  "language": "en",
  "home_page_url": "https://example.com/",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "I am writing about my experiences as a naval navel-gazer.",
  "author": {
    "name": "Your Name Here",
    "url": "https://example.com/about-me/"
  },
  "items": [{
      "id": "https://example.com/posts/firstpost/",
      "url": "https://example.com/posts/firstpost/",
      "title": "Installing open-wc on MacOS.",
      "content_html": "<p>In order to install open-wc we need to install some software, namely NodeJS/npm, and yarn.  We will start with NodeJS. First, navigate to <a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a> and install the LTS version, at the time of writing that is 14.17.5.  Once the installer finishes downloading, open it and follow the prompts.  If npm is already installed on your machine preform the <code>npm install -g npm@latest</code> to install the latest version of NPM</p>\n<p>Upon completion of installing Node, open Terminal and type in the following commands: <code>node -v</code> and <code>npm -v</code> to verify that your installation was successful.</p>\n<p>To install yarn, open terminal type the following command: <code>curl -o- -L https://yarnpkg.com/install.sh | bash </code>.  Upon the completion of the command preform the following command to verify installation: <code>yarn -v</code>.</p>\n<p>With our dependencies installed, let’s create a test project called “hello-world”.  Let’s change directories such as Documents.  Open termainal and type <code>cd Documents</code>.  Type ‘pwd’ to verify the output is <code>/Users/&lt;Your User Name&gt;/Documents</code>.  Then type <code>npm init @open-wc</code> and select the following options: Scaffold a new project, Web Component, enable Linting, Testing, and Demoing, do NOT use typescript, name it hello-world, select yes to write files to your hard drive, and Yes with Yarn.</p>\n<p>To verify the project worked, type the following commands <code>cd hello-world</code> and then <code>npm start</code>.  If your web browser opens, then your job is done.  To stop the project, return to terminal and hit ‘control’ + ‘c’</p>\n",
      "date_published": "2022-02-22T00:00:00Z"
    },{
      "id": "https://example.com/posts/thirdpost/",
      "url": "https://example.com/posts/thirdpost/",
      "title": "My Possible Futures.",
      "content_html": "<p>We all have ideas of what the future could look like. We all have ideas to make the future better. We all have dreams about what could happen. For me, I ponder what if I could do X thing. If I could build an app, website, or technology of any kind, What would it do? A little background on me, I run the Penn State College of Information Sciences and Technology Peer Tutoring program. I have been in this role for the past 3 years now and it gives me a source of great pride for me to help my fellow peers. A personal project for me would to build a college-specific tutoring video library. This service would be similar to LinkedIn Learning where a student would select a course and follow along with the modules, but the module has short videos and links going over each topic. Each topic would be explained in a few different ways to match different learning modes and provide the best possible asynchronous tutoring experience. My goal is to provide a tutoring experience to all college students regardless of whether or not they have access to an in-person tutor. Similar to how students are automatically added to their learning management system's courses, students would have access to our service the same way. Students would go to their course, select the tutoring tab, and select the topic they are struggling with.</p>\n<p>Outside of an application development lens; if money and time were of no concern; what would I do with my life and the skills I've assembled if I could dedicate it to one thing? I would create a trades school with &quot;majors&quot; in fields students could have a future in. These majors would be in subjects where good-paying jobs are common and may not be traditional college majors. Automotive technician, diesel technician, electrician, plumbing, programming, accounting, cyber security, among many others. The school would focus on real-world problems, experience, and building a portfolio. I feel that college inadvertently locks undecided students into believing a typical college education is the only way to go. I know it's not the case and I want a school that gives students a way to know if a trade is their favorite career path or college. I probably can say if I went to this type of school, I don't know if I would be a programmer since I love to work with my hands. If I can make anyone's career choice easier than mine, I would be fulfilled professionally!</p>\n",
      "date_published": "2021-11-07T00:00:00Z"
    },{
      "id": "https://example.com/posts/secondpost/",
      "url": "https://example.com/posts/secondpost/",
      "title": "Web Component Framework Breakdown.",
      "content_html": "<p>This week in my Web Components class, we looked into 4 popular Web Component Frameworks: Angular, React, StencilJS, and VueJS.  Each group member took one framework and followed the boilerplate/&quot;Hello World&quot; example to understand how projects in these frameworks are structured.  Below I will show the results of our research and testing as well as providing my personal opinions on a framework I would use.</p>\n<p>Across all four frameworks, there were some similarities to the way they worked.  All four use JavaScript to create/define their components as well as the interactions with them.  Stencil JS does use TypeScript files however TypeScript is then translated to JavaScript.  The frameworks also have a similar file structure in a sense that each component is given it's own directory to be defined within the project.  What is in these directories varies by project.  Most use a JavaScript function and returns that return HTML but VueJS uses.Vue Files instead.  Lastly, all of these frameworks have a base index.html file which is where all the custom components are added to/called.</p>\n<p>Based on looking at these frameworks, I think VueJS has the easiest development experience because it has the fewest amount of files out of all four frameworks.  I found when looking at the boilerplates for these frameworks, I easily understood where everything was in the VueJS directory.  I did not need to dig very far to find where the custom component was defined and what files interacted with it.  Since I have not used it to build anything, I don't know if can efficiently handle interactions like in other frameworks.  I have heard of React and Angular from my previous internships, but I have not heard of VueJS before.  This leads me to wonder how vast the development community is.</p>\n<p>With a few finds from our research, I would probably work with React to build an application.  I know from personal experience that the react community is vast.  The JavaScript files declaring components looks like HTML and is easy to understand what the code does.  I also can easily follow the file structure of this project, there are more files than VueJS, but it is still easy to follow along.</p>\n<p>To view the boilerplates my group generated, please visit our GitHub Repo here: <a href=\"https://github.com/3B4B/boilerplates\">https://github.com/3B4B/boilerplates</a></p>\n",
      "date_published": "2021-09-12T00:00:00Z"
    }
  ]
}
